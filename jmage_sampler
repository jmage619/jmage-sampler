#!/usr/bin/env python

import os
import os.path
import sys
import tty
import termios
import wave
import struct
import wx
import jmage.ui
import jmage.util

import ctypes
#from time import sleep
import time
from ctypes import pointer
from ctypes import byref
from ctypes import cast 
from ctypes import sizeof 

from ctypes import Union
from ctypes import Structure
from ctypes import POINTER
from ctypes import c_int
from ctypes import c_double
from ctypes import c_float
from ctypes import c_uint32
from ctypes import c_char_p
from ctypes import c_void_p
from ctypes import c_size_t

INT16_MAX = 2**16 / 2 - 1
SAMPLE_RATE = 44100
MT_VOLUME = 0
VOL_STEPS  = 17
NOTE_MIN = 0
NOTE_MAX = 127

OUT_LEN = 4.5

class JMSampler(Structure):
  pass

class jm_wave(Structure):
  _fields_ = [('wave', POINTER(c_float)),
    ('num_channels', c_int),
    ('length', c_int),
    ('left', c_int),
    ('right', c_int),
    ('has_loop', c_int)
  ]

class jm_key_zone(Structure):
  _fields_ = [('wave', POINTER(c_float)),
    ('num_channels', c_int),
    ('wave_length', c_int),
    ('start', c_int),
    ('left', c_int),
    ('right', c_int),
    ('low_key', c_int),
    ('high_key', c_int),
    ('origin', c_int),
    ('low_vel', c_int),
    ('high_vel', c_int),
    ('amp', c_float),
    ('attack', c_int),
    ('hold', c_int),
    ('decay', c_int),
    ('sustain', c_float),
    ('release', c_int),
    ('pitch_corr', c_double),
    ('loop_on', c_int),
    ('crossfade', c_int)
  ]

class jm_msg_data(Union):
  _fields_ = [('i', c_int)]

class jm_msg(Structure):
  _fields_ = [('type', c_int), ('data', jm_msg_data)]

# imitate getch in python
def getch():
  fd = sys.stdin.fileno()
  fd_flags = termios.tcgetattr(fd)
  tty.setraw(fd)
  key = sys.stdin.read(1)
  termios.tcsetattr(fd, termios.TCSADRAIN, fd_flags)
  return key

lib = ctypes.cdll.LoadLibrary('libjm_sampler.so')
lib.jm_parse_wave.argtypes = [POINTER(jm_wave), c_char_p]
lib.jm_destroy_wave.argtypes = [POINTER(jm_wave)]
lib.jm_init_key_zone.argtypes = [POINTER(jm_key_zone)]
lib.jm_new_sampler.restype = POINTER(JMSampler)
lib.jm_destroy_sampler.argtypes = [POINTER(JMSampler)]
lib.jm_add_zone.argtypes = [POINTER(JMSampler), POINTER(jm_key_zone)]
lib.jm_get_zone.argtypes = [POINTER(JMSampler), c_int, POINTER(jm_key_zone)]
lib.jm_update_zone.argtypes = [POINTER(JMSampler), c_int, POINTER(jm_key_zone)]
lib.jm_remove_zone.argtypes = [POINTER(JMSampler), c_int]
lib.jm_num_zones.argtypes = [POINTER(JMSampler)]
lib.jm_num_zones.restype = c_size_t
lib.jm_send_msg.argtypes = [POINTER(JMSampler), POINTER(jm_msg)]
lib.jm_receive_msg.argtypes = [POINTER(JMSampler), POINTER(jm_msg)]
lib.jm_receive_msg.restype = c_int

SAMPLER = None
# this caches loaded wav files
WAVES = {}
  
class MyFrame(wx.Frame):
  def __init__(self, *args, **kwargs):
    super(MyFrame, self).__init__(*args, **kwargs)

    # always increment on zone creation
    self.zone_name_index = 1
    self.SetTitle("Ghetto Sampler")

    # create menu bar and File menu with exit item
    menubar = wx.MenuBar()
    file_menu = wx.Menu()
    item = file_menu.Append(wx.ID_EXIT, 'Quit', 'Quit application')
    self.Bind(wx.EVT_MENU, self.OnQuit, item)
    menubar.Append(file_menu, '&File')
    self.SetMenuBar(menubar)

    sp = wx.SplitterWindow(self, style=wx.SP_LIVE_UPDATE)
    self.panel1 = wx.Panel(sp)

    # create Volume label
    vbox = wx.BoxSizer(wx.VERTICAL)
    st1 = wx.StaticText(self.panel1, label='Volume:')
    vbox.Add(st1, flag=wx.LEFT | wx.RIGHT | wx.TOP, border=10)

    # horizontal sizer to contain volume control
    hbox1 = wx.BoxSizer(wx.HORIZONTAL)

    # set font and extract char width to use in Volume output box
    self.font = wx.Font(10, wx.TELETYPE, wx.NORMAL, wx.NORMAL)
    dc = wx.ClientDC(self.panel1)
    dc.SetFont(self.font)
    self.char_width = dc.GetTextExtent("X")[0]
    width = int(self.char_width * OUT_LEN + 0.5)

    # create Volume output box
    self.output = wx.TextCtrl(self.panel1, size=(width, -1),
      style=wx.TE_RIGHT | wx.TE_PROCESS_ENTER)
    self.output.SetValue(str(VOL_STEPS - 1))
    self.output.SetFont(self.font)
    self.Bind(wx.EVT_TEXT_ENTER, self.OnVolUpdate, self.output)
    hbox1.Add(self.output, flag=wx.RIGHT, border=10)

    # create Volume slider
    self.slider = wx.Slider(self.panel1, -1, VOL_STEPS - 1, 0, VOL_STEPS - 1, size=(200, -1),
      style=wx.SL_HORIZONTAL)
    self.Bind(wx.EVT_SCROLL, self.OnVolScroll, self.slider)
    hbox1.Add(self.slider, flag=wx.ALIGN_CENTER | wx.RIGHT, border=10)
    
    # to load patches
    self.load_button = wx.Button(self.panel1, -1, "load")
    self.Bind(wx.EVT_BUTTON, self.OnLoad, self.load_button)
    hbox1.Add(self.load_button, flag=wx.ALIGN_CENTER)

    vbox.Add(hbox1, flag=wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, border=10)

    # create zone grid
    self.zone_panel = jmage.ui.StretchColGrid(20, self.panel1, style=wx.TAB_TRAVERSAL)
    vbox.Add(self.zone_panel, flag=wx.LEFT | wx.RIGHT | wx.TOP | wx.EXPAND, border=10, proportion=1)
    self.AddZoneHeader()

    self.panel1.SetSizer(vbox)

    self.panel2 = wx.Panel(sp)
    # to create zones
    self.add_zone_button = wx.Button(self.panel2, -1, "+")

    self.Bind(wx.EVT_BUTTON, self.OnZoneAdd, self.add_zone_button)

    sp.SplitHorizontally(self.panel1, self.panel2, sashPosition=250)

    self.Show()

  def OnQuit(self, e):
    self.Close()

  def OnVolScroll(self, e):
    level = e.GetEventObject().GetValue()
    msg = jm_msg()
    msg.type = MT_VOLUME
    msg.data.i = level
    lib.jm_send_msg(SAMPLER, byref(msg))

    self.output.SetValue(str(level))

  def OnVolUpdate(self, e):
    val = e.GetEventObject().GetValue()
    try:
      level = int(val)
      if level >= 0 and level < VOL_STEPS:
        msg = jm_msg()
        msg.type = MT_VOLUME
        msg.data.i = level
        lib.jm_send_msg(SAMPLER, byref(msg))
        self.slider.SetValue(level)
    except ValueError:
      pass

  def OnLoad(self, e):
    dlg = wx.FileDialog(self, "Open a FUCKING patch already!!", os.getcwd(), style=wx.OPEN)
    if dlg.ShowModal() == wx.ID_OK:
      path = dlg.GetPath()
      sfz = jmage.util.parse_sfz(path)
      #print sfz.regions
      sfz_dir = os.path.dirname(path)

      t = time.time()
      for region in sfz.regions:
        wav_path = os.path.join(sfz_dir, region['sample'])
        zone = new_zone_from_file(wav_path)
        # these should really be already validated and converted inside parse
        zone.low_key = region['lokey']
        zone.high_key = region['hikey']
        zone.origin = region['pitch_keycenter']
        zone.low_vel = region['lovel']
        zone.high_vel = region['hivel']
        # loop_mode, start, and end do not have defaults, may be defined inside wav
        if 'loop_mode' in region and region['loop_mode'] == 'loop_continuous':
          zone.loop_on = 1
        if 'loop_start' in region:
          zone.left = region['loop_start']
        if 'loop_end' in region:
          zone.right = region['loop_end']
        zone.decay = int(SAMPLE_RATE * region['ampeg_decay'])
        zone.sustain = region['ampeg_sustain'] / 100.
        zone.release = int(SAMPLE_RATE * region['ampeg_release'])
        lib.jm_add_zone(SAMPLER, byref(zone))
        self.AddZone(zone, wav_path)
      print "time to load sfz: %f\n" % (time.time() - t)
      sfz.close()

    dlg.Destroy()

  def AddZoneHeader(self):
    # zone removal button
    st = wx.StaticText(self.zone_panel, label="Remove")
    self.zone_panel.Add(st)

    st = wx.StaticText(self.zone_panel, label="Name")
    st.SetSize((7 * self.char_width, -1))
    self.zone_panel.Add(st)

    st = wx.StaticText(self.zone_panel, label="Amp")
    st.SetSize((5 * self.char_width, -1))
    self.zone_panel.Add(st)

    st = wx.StaticText(self.zone_panel, label="Origin")
    st.SetSize((8 * self.char_width, -1))
    self.zone_panel.Add(st)

    st = wx.StaticText(self.zone_panel, label="Lower")
    st.SetSize((8 * self.char_width, -1))
    self.zone_panel.Add(st)

    st = wx.StaticText(self.zone_panel, label="Upper")
    st.SetSize((8 * self.char_width, -1))
    self.zone_panel.Add(st)

    st = wx.StaticText(self.zone_panel, label="Lo Vel")
    st.SetSize((5 * self.char_width, -1))
    self.zone_panel.Add(st)

    st = wx.StaticText(self.zone_panel, label="Hi Vel")
    st.SetSize((5 * self.char_width, -1))
    self.zone_panel.Add(st)

    st = wx.StaticText(self.zone_panel, label="Pitch")
    st.SetSize((5 * self.char_width, -1))
    self.zone_panel.Add(st)

    st = wx.StaticText(self.zone_panel, label="Start")
    st.SetSize((5 * self.char_width, -1))
    self.zone_panel.Add(st)

    st = wx.StaticText(self.zone_panel, label="Left")
    st.SetSize((5 * self.char_width, -1))
    self.zone_panel.Add(st)

    st = wx.StaticText(self.zone_panel, label="Right")
    st.SetSize((5 * self.char_width, -1))
    self.zone_panel.Add(st)

    st = wx.StaticText(self.zone_panel, label="Loop")
    self.zone_panel.Add(st)

    st = wx.StaticText(self.zone_panel, label="CF")
    st.SetSize((4 * self.char_width, -1))
    self.zone_panel.Add(st)

    st = wx.StaticText(self.zone_panel, label="Attack")
    #st.SetSize((5 * self.char_width, -1))
    self.zone_panel.Add(st)

    st = wx.StaticText(self.zone_panel, label="Hold")
    st.SetSize((5 * self.char_width, -1))
    self.zone_panel.Add(st)

    st = wx.StaticText(self.zone_panel, label="Decay")
    #st.SetSize((5 * self.char_width, -1))
    self.zone_panel.Add(st)

    st = wx.StaticText(self.zone_panel, label="Sustain")
    #st.SetSize((5 * self.char_width, -1))
    self.zone_panel.Add(st)

    st = wx.StaticText(self.zone_panel, label="Release")
    #st.SetSize((5 * self.char_width, -1))
    self.zone_panel.Add(st)

    st = wx.StaticText(self.zone_panel, label="Path")
    st.SetSize((64 * self.char_width, -1))
    self.zone_panel.Add(st)

  def AddZone(self, zone, path):
    # zone removal button
    remove_zone_button = wx.Button(self.zone_panel, -1, "-")
    self.zone_panel.Add(remove_zone_button)
    self.Bind(wx.EVT_BUTTON, self.OnZoneRemove, remove_zone_button)

    tc = wx.TextCtrl(self.zone_panel)
    tc.SetValue("Zone %i" % self.zone_name_index)
    self.zone_panel.Add(tc)
    self.zone_name_index += 1

    tc = jmage.ui.DragBox(0.01, 0.0, 1.0, self.zone_panel,
      fmt="%.2f", callback=ControlCallback, style=wx.TE_RIGHT)
    tc.ChangeValue(zone.amp)
    tc.SetFont(self.font)
    self.zone_panel.Add(tc)

    cb = jmage.ui.NoteChoice(self.zone_panel)
    cb.Select(zone.origin)
    cb.SetFont(self.font)
    self.zone_panel.Add(cb)
    self.Bind(wx.EVT_CHOICE, self.OnControlEvent, cb)

    cb = jmage.ui.NoteChoice(self.zone_panel)
    cb.Select(zone.low_key)
    cb.SetFont(self.font)
    self.zone_panel.Add(cb)
    self.Bind(wx.EVT_CHOICE, self.OnControlEvent, cb)

    cb = jmage.ui.NoteChoice(self.zone_panel)
    cb.Select(zone.high_key)
    cb.SetFont(self.font)
    self.zone_panel.Add(cb)
    self.Bind(wx.EVT_CHOICE, self.OnControlEvent, cb)

    tc = jmage.ui.DragBox(1, 0, 127, self.zone_panel,
      callback=ControlCallback, style=wx.TE_RIGHT)
    tc.ChangeValue(zone.low_vel)
    tc.SetFont(self.font)
    self.zone_panel.Add(tc)

    tc = jmage.ui.DragBox(1, 0, 127, self.zone_panel,
      callback=ControlCallback, style=wx.TE_RIGHT)
    tc.ChangeValue(zone.high_vel)
    tc.SetFont(self.font)
    self.zone_panel.Add(tc)

    tc = jmage.ui.DragBox(0.01, -0.5, 0.5, self.zone_panel,
      fmt="%.2f", callback=ControlCallback, style=wx.TE_RIGHT)
    tc.ChangeValue(zone.pitch_corr)
    tc.SetFont(self.font)
    self.zone_panel.Add(tc)

    wav_end = float(zone.right) / SAMPLE_RATE
    tc = jmage.ui.DragBox(0.01, 0.0, wav_end, self.zone_panel,
      fmt="%.2f", callback=ControlCallback, style=wx.TE_RIGHT)
    tc.ChangeValue(float(zone.start) / SAMPLE_RATE)
    tc.SetFont(self.font)
    self.zone_panel.Add(tc)

    tc = jmage.ui.DragBox(0.01, 0.0, wav_end, self.zone_panel,
      fmt="%.2f", callback=ControlCallback, style=wx.TE_RIGHT)
    tc.ChangeValue(float(zone.left) / SAMPLE_RATE)
    tc.SetFont(self.font)
    self.zone_panel.Add(tc)

    tc = jmage.ui.DragBox(0.01, 0.0, wav_end, self.zone_panel,
      fmt="%.2f", callback=ControlCallback, style=wx.TE_RIGHT)
    tc.ChangeValue(wav_end)
    tc.SetFont(self.font)
    self.zone_panel.Add(tc)

    cb = wx.CheckBox(self.zone_panel)
    cb.SetValue(zone.loop_on)
    self.zone_panel.Add(cb)
    self.Bind(wx.EVT_CHECKBOX, self.OnControlEvent, cb)

    tc = jmage.ui.DragBox(1, 0, 1000, self.zone_panel,
      callback=ControlCallback, style=wx.TE_RIGHT)
    tc.ChangeValue(int(float(zone.crossfade) / SAMPLE_RATE * 1000))
    tc.SetFont(self.font)
    self.zone_panel.Add(tc)

    tc = jmage.ui.DragBox(0.01, 0.0, wav_end, self.zone_panel,
      fmt="%.2f", callback=ControlCallback, style=wx.TE_RIGHT)
    tc.ChangeValue(float(zone.attack) / SAMPLE_RATE)
    tc.SetFont(self.font)
    self.zone_panel.Add(tc)

    tc = jmage.ui.DragBox(0.01, 0.0, wav_end, self.zone_panel,
      fmt="%.2f", callback=ControlCallback, style=wx.TE_RIGHT)
    tc.ChangeValue(float(zone.hold) / SAMPLE_RATE)
    tc.SetFont(self.font)
    self.zone_panel.Add(tc)

    tc = jmage.ui.DragBox(0.01, 0.0, wav_end, self.zone_panel,
      fmt="%.2f", callback=ControlCallback, style=wx.TE_RIGHT)
    tc.ChangeValue(float(zone.decay) / SAMPLE_RATE)
    tc.SetFont(self.font)
    self.zone_panel.Add(tc)

    tc = jmage.ui.DragBox(0.01, 0.0, 1.0, self.zone_panel,
      fmt="%.2f", callback=ControlCallback, style=wx.TE_RIGHT)
    tc.ChangeValue(zone.sustain)
    tc.SetFont(self.font)
    self.zone_panel.Add(tc)

    tc = jmage.ui.DragBox(0.01, 0.0, wav_end, self.zone_panel,
      fmt="%.2f", callback=ControlCallback, style=wx.TE_RIGHT)
    tc.ChangeValue(float(zone.release) / SAMPLE_RATE)
    tc.SetFont(self.font)
    self.zone_panel.Add(tc)

    st = wx.StaticText(self.zone_panel, label=path)
    self.zone_panel.Add(st)

  def OnZoneAdd(self, e):
    dlg = wx.FileDialog(self, "Open a FUCKING WAV already!!", os.getcwd(), style=wx.OPEN)
    if dlg.ShowModal() == wx.ID_OK:
      path = dlg.GetPath()

      zone = new_zone_from_file(path)

      lib.jm_add_zone(SAMPLER, byref(zone))
      self.AddZone(zone, path)

    dlg.Destroy()

  def OnZoneRemove(self, e):
    win = e.GetEventObject()
    grid = win.GetParent()
    index = grid.GetIndex(win)

    # first index of grid is header
    zone_index = index[0] - 1
    lib.jm_remove_zone(SAMPLER, zone_index)
    grid.RemoveRow(index[0])

  def OnControlEvent(self, e):
    ControlCallback(e.GetEventObject())

def load_wave(path):
  wav = jm_wave()
  lib.jm_parse_wave(byref(wav), path)
  return wav

def new_zone_from_file(path):
  if path in WAVES:
    wav = WAVES[path]
  else:
    wav = load_wave(path)
    WAVES[path] = wav

  zone = jm_key_zone()
  lib.jm_init_key_zone(byref(zone))

  zone.num_channels = wav.num_channels
  zone.wave = wav.wave

  zone.wave_length = wav.length
  zone.left = wav.left
  zone.right = wav.right
  zone.loop_on = wav.has_loop
  print "new zone loop on?", zone.loop_on

  return zone

def ControlCallback(win):
  #print "callback called"
  grid = win.GetParent()
  index = grid.GetIndex(win)
  # first index of grid is header
  zone_index = index[0] - 1
  zone = jm_key_zone()
  lib.jm_get_zone(SAMPLER, zone_index, byref(zone))

  if index[1] == 2:
    zone.amp = win.GetValue()
  elif index[1] == 3:
    zone.origin = win.GetSelection()
  elif index[1] == 4:
    zone.low_key = win.GetSelection()
  elif index[1] == 5:
    zone.high_key = win.GetSelection()
  elif index[1] == 6:
    zone.low_vel = int(win.GetValue())
  elif index[1] == 7:
    zone.high_vel = int(win.GetValue())
  elif index[1] == 8:
    zone.pitch_corr = win.GetValue()
  elif index[1] == 9:
    zone.start = int(SAMPLE_RATE * win.GetValue())
  elif index[1] == 10:
    zone.left = int(SAMPLE_RATE * win.GetValue())
  elif index[1] == 11:
    zone.right = int(SAMPLE_RATE * win.GetValue())
  elif index[1] == 12:
    zone.loop_on = int(win.GetValue())
  elif index[1] == 13:
    zone.crossfade = int(SAMPLE_RATE * win.GetValue() / 1000.)
  elif index[1] == 14:
    zone.attack = int(SAMPLE_RATE * win.GetValue())
  elif index[1] == 15:
    zone.hold = int(SAMPLE_RATE * win.GetValue())
  elif index[1] == 16:
    zone.decay = int(SAMPLE_RATE * win.GetValue())
  if index[1] == 17:
    zone.sustain = win.GetValue()
  elif index[1] == 18:
    zone.release = int(SAMPLE_RATE * win.GetValue())

  lib.jm_update_zone(SAMPLER, zone_index, byref(zone))
  
if __name__ == '__main__':
  SAMPLER = lib.jm_new_sampler()

  level = VOL_STEPS - 1

  msg = jm_msg()
  msg.type = MT_VOLUME
  
  msg.data.i = level
  lib.jm_send_msg(SAMPLER, byref(msg))

  app = wx.App()

  frame = MyFrame(None, size=(490,400))

  app.MainLoop()
  lib.jm_destroy_sampler(SAMPLER)

  for wav in WAVES:
    lib.jm_destroy_wave(byref(WAVES[wav]))
